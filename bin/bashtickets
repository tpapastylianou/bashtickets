#!/bin/bash

# -------------
# Sanity checks
# -------------

# Define a useful 'error' utility function, and make it available to subcommands
# (libstderred.so compatible -- see https://unix.stackexchange.com/a/164223)
error () { awk "BEGIN { print \"$*\" > \"/dev/stderr\" }"; }
export -f error


# Assert everything is installed in the expected locations (relative to this script)
export BT_BIN_DIR="$(dirname "$BASH_SOURCE" | xargs realpath)"
export BT_ROOT_DIR="${BT_BIN_DIR%"/bin"}"
export BT_BIN_DIR="${BT_ROOT_DIR/bin}"
export BT_DOC_DIR="$BT_ROOT_DIR/doc"
export BT_SHARE_DIR="$BT_ROOT_DIR/share"
export BT_TEMPLATES_DIR="$BT_SHARE_DIR/templates"
export BT_UTILS_DIR="$BT_SHARE_DIR/utils"

if     test -d "$BT_ROOT_DIR"      &&
       test -d "$BT_BIN_DIR"       &&
       test -d "$BT_DOC_DIR"       &&
       test -d "$BT_SHARE_DIR"     &&
       test -d "$BT_TEMPLATES_DIR" &&
       test -d "$BT_UTILS_DIR"

then   :   # i.e. do nothing

else   error "Error: did not detect a valid installation of bashtickets."
       error "Please re-install and try again."
       exit 1
fi



# -------------------------------------
# Define helper constants and functions
# -------------------------------------

# Exit statuses for various errors
declare -i EXIT_STATUS__INVALID_BASHTICKETS_INSTALLATION=1
declare -i EXIT_STATUS__NOT_A_VALID_BASHTICKETS_REPOSITORY=2
declare -i EXIT_STATUS__FAILED_TO_INITIALIZE_REPOSITORY=3
declare -i EXIT_STATUS__FAILED_TO_CREATE_TICKET_OR_MILESTONE=4
declare -i EXIT_STATUS__FAILED_TO_CREATE_TICKET=5
declare -i EXIT_STATUS__FAILED_TO_CREATE_MILESTONE=6

declare -i EXIT_STATUS__CALLED_WITHOUT_SUCOMMAND=100

function trycatch () {

    declare    COMMAND=( "${@: 1: ${#@} - 1}" )   # Collect all input arguments 
                                                  # except last, as an array

    declare -i EXITSTATUS="${@: -1}"              # Get last input argument only

    if   "$BT_UTILS_DIR/${COMMAND[@]}"   # Run the respective BT utility command
                                         # given as the first argument, with
                                         # remaining arguments passed
                                         # appropriately
    then :
    else exit $EXITSTATUS   # If the above command exited with non-zero status,
                            # abort this script with the exit status provided as
                            # the last input argument to this function
    fi
}

function check_repo    () { trycatch "is_valid_bashtickets_repository" $EXIT_STATUS__NOT_A_VALID_BASHTICKETS_REPOSITORY && source .bashtickets/config; }
function display_help  () { echo "Showing help... TODO"; exit 0; }
function display_usage () { echo "Displaying usage ... TODO"; exit $EXIT_STATUS__CALLED_WITHOUT_SUCOMMAND; }

# ---------------------
# Parse input arguments
# ---------------------

case "$1" in
    ("init")          trycatch "initialise_bashtickets_repository" $EXIT_STATUS__FAILED_TO_INITIALIZE_REPOSITORY ;;
    ("update" | "up") check_repo && echo "Updating Milestones" ;;
    ("show" | "sh")   check_repo && echo "Showing tickets" ;;
    ("comment" | "m") check_repo && echo "Adding comment to ticket" ;;
    ("assign")        check_repo && echo "Assigning tickets to milestone" ;;
    ("close" | "cl")  check_repo && echo "Closing ticket" ;;
    ("new")           check_repo && trycatch "new_ticket_or_milestone" "$2" $EXIT_STATUS__FAILED_TO_CREATE_TICKET_OR_MILESTONE ;;
    ("nt")            check_repo && trycatch "new_ticket" "$2" $EXIT_STATUS__FAILED_TO_CREATE_TICKET ;;
    ("nm")            check_repo && trycatch "new_milestone" "$2" $EXIT_STATUS__FAILED_TO_CREATE_MILESTONE ;;
    ("help" | "h")    display_help ;;
    ("status" | "st") check_repo && echo "Displaying milestone status (all/open/closed)" ;;
    ("remove" | "rm") check_repo && echo "Removing last ticket / milestone or by number" ;;
    ("edit" | "ed")   check_repo && echo "Edit ticket / milestone" ;;
    (*)               display_usage
esac
