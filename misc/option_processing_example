   function show_tickets_by_milestone () {
    # --------------------------------------------------------------------------
    # Invoked via 'list milestones'
    #
    # Expects a single milestone number/filename.
    # Options: --status (any status in TICKET_STATUSES) to filter by that status
    #
    # If the milestone number is "0", this shows 'unmilestoned' tickets.
    # --------------------------------------------------------------------------

    # Process input arguments and options
      local -a ARGS      # local array to contain input arguments (not options)
      local -A OPTIONS   # local associative array to hold valid options
      local STILL_PROCESSING_OPTIONS=true

      while test ${#@} -gt 0
      do    if   test "$1" = "--"
            then STILL_PROCESSING_OPTIONS=false
                 shift && continue

            elif STILL_PROCESSING_OPTIONS && test "${1:0:2}" = "--"
            then process_long_option "$1" "$2"

            elif STILL_PROCESSING_OPTIONS && test "${1:0:1}" = "-"
            then process_short_option "$1" "$2"

            else ARGS[${#ARGS[@]}]="$1"   # i.e, append at end of ARGS array
                 shift && continue
            fi

          # If we're here it means an option has been processed
            case "$OPTION_KEY" in
               ("--status" | "-s")  OPTIONS["Status"]="$OPTION_VALUE" ;;
               (*) error "Unknown option '$OPTION_KEY' passed to 'show_tickets_by_milestone'" && return 1 ;;
            esac
            shift $OPTION_SHIFT
      done

    # Validate input arguments
      if   test ${#ARGS[@]} -ne 1
      then error "Error: show_tickets_by_milestone takes exactly 1 non-option arguments"
           display_usage "show_tickets_by_milestone"
           exit $EXIT_STATUS__INVALID_SUBCOMMAND_SYNTAX
      fi

      if   is_in "${OPTION["Status"]}" "${TICKET_STATUSES[@]}"
      then :
      else error "Error: Status ${OPTION["Status"]} is not a valid status."
           error "Valid status options are: ${TICKET_STATUSES[@]}"
           return 1
      fi

      # TODO continue as show_open, but specifying status

   }
