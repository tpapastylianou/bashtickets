#!/bin/bash

# Note: the 'error' function used here is defined in the main bashtickets script
 # and exported here

  if   test ${#@} -gt 0
  then error "Error: Incorrect arguments provided to new_ticket function"
       echo
       "$BT_UTILS_DIR/display_usage"
       exit 1
  fi

# Note: no 'valid repo' sanity checks here, since they will have been already
 # performed by the main 'bashtickets' executable

# 'Import' arrays defined in config
  source "$CONFIG_FILE"

# Capture ticket path and template onto the relevant variables
  TICKETS_PATH="$( realpath ./tickets )"
  TICKET_TEMPLATE="$BT_TEMPLATES_DIR/0.ticket"

  cd $TICKETS_PATH


# If this is the first ticket, start numbering from 1; otherwise, find the
 # last ticket number, and increment by one.

  if     test -f 1.ticket
  then   LAST_TICKET_NUM=$(ls *.ticket | sort -n | tail -n -1)   # list files, sort in numerical (not alphabetical) order, and keep last filename
         LAST_TICKET_NUM=${LAST_TICKET_NUM%.ticket}   # parameter expansion: remove '.ticket' suffix
         NEW_TICKET_NUM=$(( $LAST_TICKET_NUM + 1 ))
  else   NEW_TICKET_NUM=1
  fi

  NEW_TICKET_FILE="${NEW_TICKET_NUM}.ticket"

# Create a new ticket from template
  cp "$TICKET_TEMPLATE" "${NEW_TICKET_FILE}"

# Update ticket number
  sed -i "s/Ticket No.: /Ticket No.: ${NEW_TICKET_NUM}/" "${NEW_TICKET_FILE}"

# Try to set owner and reporter automatically:
  WHOAMI=$(whoami)
  WHOAMI=${WHOAMI^}   # parameter expansion: make first character uppercase
  sed -i "s/Reporter: /Reporter: $WHOAMI/" "${NEW_TICKET_FILE}"
  sed -i "s/Owner:/Owner: $WHOAMI/" "${NEW_TICKET_FILE}"

# Select a valid type:
  echo "Select a valid ticket type:"
  select TICKET_TYPE in "${TICKET_TYPES[@]}"   # TICKET_TYPES obtained from config
  do
      sed -i "s/Type: /Type: $TICKET_TYPE/" "${NEW_TICKET_FILE}"
      break
  done

# Select a valid priority:
  echo
  echo "Select a valid ticket priority"
  select TICKET_PRIORITY in "${TICKET_PRIORITY_LEVELS[@]}"   # TICKET_PRIORITY_LEVELS obtained from config
  do
      sed -i "s/Priority: /Priority: ${TICKET_PRIORITY%% *}/" "${NEW_TICKET_FILE}"   # Remove everything in the priority string after the first space (i.e. the explanation of the priority level)
      break
  done

# Set today's date
  TODAY=$(date +"%Y-%m-%d")
  sed -i "s/Date: /Date: $TODAY/" "${NEW_TICKET_FILE}"

# Declare status as Open
  sed -i "s/Status: /Status: Open/" "${NEW_TICKET_FILE}"

# Open resulting file in the user's editor of choice, as detected by the
 # EDITOR environmental variable. This can be overriden per bashtickets
  # repository, by assigning to this variable in the repository's config file
  # instead. If the EDITOR variable is not defined at all, nano is used as the
  # default editor.

  if   test $EDITOR = "vim"
  then vim '+cal cursor(2,14)' "${NEW_TICKET_FILE}"
  else nano +2,14 "${NEW_TICKET_FILE}"
  fi

# Report successful creation of new ticket, mentioning number.
  echo
  echo "Ticket No. ${NEW_TICKET_NUM} created successfully"
  echo
