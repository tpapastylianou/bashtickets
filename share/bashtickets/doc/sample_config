# Bashtickets repo configuration file

#####################
### Mandatory options
#####################

# Ticket priority Levels: Defined as a bash array of strings of the form
#     "PriorityLevel   (optional description)"
#
# The full string is shown in the interactive menu. 'PriorityLevel' is what is
# assigned as a priority label to the ticket itself. This should be a single
# word, as everything after the first space is discarded when assigning this to
# the ticket itself.
TICKET_PRIORITY_LEVELS=(
  "Lowest     (desirable, but not strictly necessary; minimal disruption if not done)"
  "Normal     (as soon as possible; required, but not urgent or critical)"
  "Important  (but can wait)"
  "Urgent     (but not of critical importance)"
  "Highest    (both important and urgent)"
)

# Ticket types: Defined as a bash array of single-word strings.
# This list will be used to create an interactive menu when creating a new
# ticket. The selected option will be used to populate the 'Type:' field.
TICKET_TYPES=(
  "Investigation (Choose if the ticket will ask and answer a question)"
  "Bugfix        (Choose if something is malfunctioning and needs fixing)"
  "Feature       (Choose if new functionality will be added to the project)"
  "Task          (Choose if some other actionable task needs to be done)"
)

# Ticket resolutions: This menu is used when closing tickets.
TICKET_RESOLUTIONS=(
  "Completed   (The task was performed successfully)"
  "Delegated   (The task will be completed externally)"
  "Postponed   (The task will be attempted at a later time)"
  "Cancelled   (The task was not deemed necessary after all)"
  "Duplicate   (The issue has been addressed previously)"
  "Superceded" (Ticket out-of-date, superceded by newer ticket)
  "Invalid     (The task was reported in error)"
#  "Fixed"
#  "WontFix"
#  "WorksForMe"
)

# Ticket statuses: This menu is used when changing ticket status. Statuses
# should only relate to 'open' tickets; when a ticket is closed, the status
# field is cleared automatically.
#
# NOTE: When creating new tickets, bashtickets will not ask the user to specify
# a status, but will instead use the TOP item from this array automatically as
# the default status (typically the default status should be 'new').
TICKET_STATUSES=(
  "New          (New ticket. An owner will be nominated later.)"
  "Assigned     (An owner has been nominated, but they have not yet accepted ownership)"
  "Accepted     (Assigned owner has accepted responsibility for the ticket)"
  "Blocked      (Another ticket exists, which, unless resolved, prevents further work on this ticket)"
  "Confirmed    (The described bug has been confirmed as reproducible.)"
  "InProgress"
  "NeedInfo     (Unable to reproduce bug as described. Need more info from submitter.)"
  "ReadyForTest"
  "Reopened     (Awaiting fresh assignment)"
)

####################
### Optional options
####################

### Items here can be defined to override defaults defined in the main script.
### For convenience, the functions provided in the sample config file are
### identical to the default definitions used in the main script.


## Wrapper function to invoke the user's preferred editor. Expects to be called
## via the following syntax: "editor <filename> <line> <column>".
##
## The default version here tries to detect the user's EDITOR environmental
## variable; if the EDITOR variable is not defined at all, nano is used as the
## default editor.
##
## If you are using an editor other than nano or vim, you can either redefine
## this function from scratch or simply add another 'case' below; in the latter
## case, the EDITOR variable can either be from your environmental variables, or
## it can be defined locally in this script.
function editor () {

  if   test $# -eq 3
  then :
  else error "Error: incorrect number of arguments used."
       display_usage editor
       return 1
  fi

  local FILE="$1"
  local LINE="$2"
  local COLUMN="$3"

  if   test $EDITOR = "vim"
  then vim "+cal cursor($LINE,$COLUMN)" "$FILE"
  else nano +$LINE,$COLUMN "$FILE"
  fi
}


## This function should return an appropriate date in "%Y-%m-%d" format, to be
## used as the starting date when creating new milestones. It should not expect
## arguments.
##
## The default version here simply returns the current date at the time of
## creation of the new milestone.
function get_default_milestone_startdate () {
  date +"%Y-%m-%d"   # i.e. today's date
}

## This function should return an appropriate date in "%Y-%m-%d" format, to be
## used as the default 'deadline' date when creating new milestones. It should
## expect a single argument, corresponding to the particular milestone's
## starting date.
##
## The default version here simply returns the date corresponding to one month
## after the date provided as the input argument.
function get_default_milestone_deadline () {
  local STARTDATE="$1"
  date --date="$STARTDATE +1 month" +"%Y-%m-%d"
}
